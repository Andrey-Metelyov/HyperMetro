type: edu
files:
- name: src/Main.java
  visible: true
  text: |
    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class Tests extends StageTest<String> {
        // test from the previous stage with one line
        @DynamicTest(order = 1)
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start("./test/baltimore.json");

            String output = main.execute("/output \"SubwayLink\"").trim();
            checkDepots(output);
            checkOutputLength(output, 14);

            assertStations(output, new String[]{"Owings Mills", "Old Court", "Milford Mill", "Reiserstown Plaza",
                "Rogers Avenue", "West Cold Spring", "Mondawmin", "Penn North", "Uptown", "State Center",
                "Lexington Market", "Charles Center", "Shot Tower/Market Place", "Johns Hopkins Hospital"});

            return CheckResult.correct();
        }

        // test of example
        @DynamicTest(order = 2)
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");

            String output = main.execute("/output \"m1\"").trim();
            checkDepots(output);

            checkOutputLength(output, 15);

            assertStations(output, new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon"});

            output = main.execute("/output \"m2\"");
            checkDepots(output);
            checkOutputLength(output, 14);

            assertStations(output, new String[]{"Croisettes", "Vennes", "Fourmi", "Sallaz", "CHUV", "Ours",
                "Riponne M.Bejart", "Bessieres", "Lausanne—Flon", "Lausanne Gare CFF", "Grancy", "Delices", "Jourdils",
                "Ouchy—Olympique"});

            return CheckResult.correct();
        }

        // example test pt.2 (with addition)
        @DynamicTest(order = 3)
        CheckResult test2_1() {
            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");

            // added a station to the end of the line
            main.execute("/append \"m1\" \"Test station 1\"");
            String output = main.execute("/output \"m1\"");

            checkDepots(output);
            checkOutputLength(output, 16);
            assertStations(output, new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1"});

            // added another one
            main.execute("/append \"m1\" \"Test station 2\"");
            output = main.execute("/output \"m1\"");

            checkDepots(output);
            checkOutputLength(output, 17);
            assertStations(output, new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"});

            // added one station to the beginning of the line
            main.execute("/add-head \"m1\" \"Head\"");
            output = main.execute("/output \"m1\"");

            checkDepots(output);
            checkOutputLength(output, 18);
            assertStations(output, new String[]{"Head", "Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"});

            return CheckResult.correct();
        }

        // not existing file check
        @DynamicTest(order = 4)
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            String output = main.start("tHiS_fIlE_DoEs_nOt_ExIsT.txt").toLowerCase();

            if (output.trim().length() == 0) {
                return CheckResult.wrong("The program did not print anything when the file that doesn't exist was passed.");
            }
            if (output.startsWith("depot") || output.endsWith("depot") || !output.contains("error")) {
                return CheckResult.wrong("It looks like the program did not print an error message when the file that doesn't exist was passed.\n" +
                    "Your output should contain 'error'.");
            }

            return CheckResult.correct();
        }

        // additional test case
        @DynamicTest(order = 5)
        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            main.start("./test/samara.json");

            main.execute("/append \"line 1\" \"Krylya Sovetov\"");
            String output = main.execute("/output \"line 1\"");

            checkDepots(output);

            checkOutputLength(output, 11);

            assertStations(output, new String[]{"Alabinskaya", "Rossiyskaya", "Moskovskaya",
                "Gagarinskaya", "Sportivnaya", "Sovetskaya", "Pobeda", "Bezymyanka", "Kirovskaya", "Yungorodok",
                "Krylya Sovetov"});

            main.execute("/add-head \"line 1\" Samarskaya");
            output = main.execute("/output \"line 1\"");

            checkDepots(output);
            checkOutputLength(output, 12);

            assertStations(output, new String[]{"Samarskaya", "Alabinskaya", "Rossiyskaya", "Moskovskaya",
                "Gagarinskaya", "Sportivnaya", "Sovetskaya", "Pobeda", "Bezymyanka", "Kirovskaya", "Yungorodok",
                "Krylya Sovetov"});

            return CheckResult.correct();
        }

        // checks for "depot" at the start and at the end
        void checkDepots(String output) {
            output = output.trim().toLowerCase();
            if (!output.startsWith("depot")) {
                throw new WrongAnswer("Your output should start with 'depot'.");
            } else if (!output.endsWith("depot")) {
                throw new WrongAnswer("Your output should end with 'depot'.");
            }
        }

        // checks number of stations in output
        void checkOutputLength(String output, int correctLength) {
            int length = output.trim().split("\n").length;
            if (length != correctLength) {
                throw new WrongAnswer("You output contains wrong number of lines.\n" +
                    "Expected: " + correctLength + " lines\n" +
                    "Your output: " + length + " lines");
            }
        }

        // checks stations
        void assertStations(String output, String[] stations) {

            String[] sOutput = output.trim().split("\n");

            for (int i = 0; i < stations.length; i++) {

                String currentLine = sOutput[i].trim();
                if (currentLine.split("-").length != 3) {
                    throw new WrongAnswer("There is should be 3 stations in one line.\n" +
                        "Treat 'depot' as a station name");
                }

                // Checking the first line
                if (i == 0) {
                    for (int j = 0; j < 2; j++) {
                        if (!currentLine.contains(stations[i + j])) {
                            throw new WrongAnswer("Can't find station '" + stations[i + j] + "' in the line number " + (i + 1));
                        }
                    }
                    // Checking the last line
                } else if (i == stations.length - 1) {
                    for (int j = 0; j < 2; j++) {
                        if (!currentLine.contains(stations[i + j - 1])) {
                            throw new WrongAnswer("Can't find station '" + stations[i + j - 1] + "' in the line number " + (i + 1));
                        }
                    }
                    // Checking the rest lines
                } else {
                    for (int j = 0; j < 3; j++) {
                        if (!currentLine.contains(stations[i + j - 1])) {
                            throw new WrongAnswer("Can't find station '" + stations[i + j - 1] + "' in the line number " + (i + 1));
                        }
                    }
                }
            }
        }
    }
  learner_created: false
- name: src/MetroLinkedList.java
  visible: true
  text: |
    import java.util.Collection;

    class MetroLinkedList<T> {
        Node<T> head;
        Node<T> tail;
        int size;

        static class Node<T> {
            T value;
            Node<T> prev;
            Node<T> next;

            public Node(T value, Node<T> prev, Node<T> next) {
                this.value = value;
                this.prev = prev;
                this.next = next;
            }
        }

        public MetroLinkedList() {
        }

        public MetroLinkedList(Collection<T> collection) {
            for (T el : collection) {
                add(el);
            }
        }

        public MetroLinkedList(T[] array) {
            for (T el : array) {
                add(el);
            }
        }

        public void printTriples(T first, T last) {
            T prev = first;
            Node<T> cur = head;
            while (cur != null) {
                T next = cur.next == null ? last : cur.next.value;
                System.out.print(prev);
                System.out.print(" - ");
                System.out.print(cur.value);
                System.out.print(" - ");
                System.out.println(next);
                prev = cur.value;
                cur = cur.next;
            }
        }

        public void addFirst(T value) {
            if (head == null) {
                add(value);
            } else {
                head.prev = new Node<>(value, null, head);
                head = head.prev;
                size++;
            }
        }

        public void addLast(T value) {
            add(value);
        }

        public void removeFirst() {
            if (head != null) {
                head = head.next;
                if (head != null) {
                    head.prev = null;
                } else {
                    tail = null;
                }
            }
            size--;
        }

        public void removeLast() {
            if (tail != null) {
                tail = tail.prev;
                if (tail != null) {
                    tail.next = null;
                } else {
                    head = null;
                }
            }
            size--;
        }

        public void reverse() {
            Node<T> cur = head;
            while (cur != null) {
                Node<T> next = cur.next;
                cur.next = cur.prev;
                cur.prev = next;
                cur = next;
            }
            cur = tail;
            tail = head;
            head = cur;
        }

        public void split(int index) {
            Node<T> cur = head;
            for (int i = 0; i < index; i++) {
                cur = cur.next;
            }
            tail.next = head;
            head.prev = tail;
            head = cur;
            tail = cur.prev;
            head.prev = null;
            tail.next = null;
        }

        public void add(T el) {
            if (tail == null) {
                head = tail = new Node<>(el, null, null);
            } else {
                tail.next = new Node<>(el, tail, null);
                tail = tail.next;
            }
            size++;
        }

        @Override
        public String toString() {
            Node<T> cur = head;
            StringBuilder buf = new StringBuilder();
            while (cur != null) {
                buf.append(cur.value).append(" ");
                cur = cur.next;
            }
            return buf.toString();
        }
    }
  learner_created: true
- name: test/lausanne.json
  visible: false
  text: |-
    {
      "m1": {
        "1": "Renes—Gare",
        "2": "Epenex",
        "3": "Crochy",
        "4": "Cerisaie",
        "5": "Bassenges",
        "6": "EPFL",
        "7": "UNL—Sorge",
        "8": "Mouline",
        "9": "UNL—Chemberonne",
        "10": "Bourdonnette",
        "11": "Melley",
        "12": "Provence",
        "13": "Montelly",
        "14": "Vigie",
        "15": "Lausanne—Flon"
      },
      "m2": {
        "1": "Croisettes",
        "2": "Vennes",
        "3": "Fourmi",
        "4": "Sallaz",
        "5": "CHUV",
        "6": "Ours",
        "7": "Riponne M.Bejart",
        "8": "Bessieres",
        "9": "Lausanne—Flon",
        "10": "Lausanne Gare CFF",
        "11": "Grancy",
        "12": "Delices",
        "13": "Jourdils",
        "14": "Ouchy—Olympique"
      }
    }
  learner_created: false
- name: test/samara.json
  visible: false
  text: |-
    {
      "line 1": {
        "1": "Alabinskaya",
        "2": "Rossiyskaya",
        "3": "Moskovskaya",
        "4": "Gagarinskaya",
        "5": "Sportivnaya",
        "6": "Sovetskaya",
        "7": "Pobeda",
        "8": "Bezymyanka",
        "9": "Kirovskaya",
        "10": "Yungorodok"
      }
    }
  learner_created: false
- name: test/baltimore.json
  visible: false
  text: |-
    {
      "SubwayLink": {
        "1": "Owings Mills",
        "2": "Old Court",
        "3": "Milford Mill",
        "4": "Reiserstown Plaza",
        "5": "Rogers Avenue",
        "6": "West Cold Spring",
        "7": "Mondawmin",
        "8": "Penn North",
        "9": "Uptown",
        "10": "State Center",
        "11": "Lexington Market",
        "12": "Charles Center",
        "13": "Shot Tower/Market Place",
        "14": "Johns Hopkins Hospital"
      }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/120/stages/649/implement#comment
status: Solved
record: 3

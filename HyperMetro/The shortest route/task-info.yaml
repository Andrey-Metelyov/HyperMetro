type: edu
files:
- name: src/Main.java
  visible: true
  text: |
    import Metro.*;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Paths;
    import java.util.*;
    import java.util.stream.Collectors;

    public class Main {
        public static void main(String[] args) {
            String filename;
            if (args.length == 0) {
                System.out.println("No file specified");
                filename = "./HyperMetro/task/test/baltimore.json";
    //            return;
            } else {
                filename = args[0];
            }
            System.err.println(Arrays.toString(args));
            System.err.println(Paths.get("").toAbsolutePath());
            try {
                String json = Files.readString(Paths.get(filename));
                System.err.println(json);
                Metro metro = Metro.deserialize(json);
    //            Map<String, MetroLinkedList> lists = readJson(json);
    //            System.err.println(lists);
                guiLoop(metro);
            } catch (NoSuchFileException e) {
                System.out.println("Error. File " + filename + " doesn't exists");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private static List<String> parse(String command) {
            List<String> list = new ArrayList<>();
            String[] commands = command.split("\\s+", 2);
            list.add(commands[0]);
            if (commands.length > 1) {
                String params = commands[1];
                while (!params.isEmpty()) {
                    if (params.charAt(0) == '"') {
                        int closeQuotePos = params.indexOf('\"', 1);
                        list.add(params.substring(1, closeQuotePos));
                        params = params.substring(closeQuotePos + 1).trim();
                    } else {
                        int nextSpacePos = params.indexOf(' ');
                        if (nextSpacePos != -1) {
                            list.add(params.substring(0, nextSpacePos));
                            params = params.substring(nextSpacePos + 1).trim();
                        } else {
                            list.add(params);
                            params = "";
                        }
                    }
                }
            }
            return list;
        }

        private static void guiLoop(Metro metro) {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                List<String> command = parse(scanner.nextLine());
                switch (command.get(0)) {
                    case "/append": {
                        String line = command.get(1);
                        Station station = new Station(command.get(2), null);
                        System.err.println(line);
                        System.err.println(station);
                        metro.getLine(line).add(station);
                        break;
                    }
                    case "/add-head": {
                        String line = command.get(1);
                        Station station = new Station(command.get(2), null);
                        metro.getLine(line).addFirst(station);
                        break;
                    }
                    ///connect "Linka C" "I.P.Pavlova" "Linka A" "Petriny"
                    case "/connect": {
                        String line1 = command.get(1);
                        String station1 = command.get(2);
                        String line2 = command.get(3);
                        String station2 = command.get(4);
                        metro.connect(line1, station1, line2, station2);
                        break;
                    }
    //                case "/remove": {
    //                    String line = command.get(1);
    //                    Station station = new Station(command.get(2), null);
    //                    metro.getLine(line).remove(station);
    //                    break;
    //                }
                    case "/output": {
                        String line = command.get(1);
                        Collection<Station> stations = metro.getLine(line).getStations();
                        System.out.println("depot");
                        System.out.println(
                                stations.stream()
                                        .map(it -> {
                                            return it.getName()
                                                    + (it.getTransfer().isEmpty() ? "" :
                                                    " - " + it.getTransfer().get(0).getStation()
                                                    + " ("
                                                            + it.getTransfer().get(0).getLine()
                                                    + ')');
                                        })
                                        .collect(Collectors.joining("\n"))
                        );
                        System.out.println("depot");
                        break;
                    }
                    case "/exit":
                        return;
                    default:
                }
            }
        }

    //    private static Map<String, MetroLinkedList> readJson(String json) {
    //        Map<String, MetroLinkedList> result = new HashMap<>();
    //        try (JsonReader reader = new JsonReader(new StringReader(json))) {
    //            String name = "";
    //            int stationNumber = 0;
    //            String stationName = "";
    //            List<Station> transfer = null;
    //            MetroLinkedList current = null;
    //            State state = State.GLOBAL;
    //            int counter = 0;
    //            while (reader.hasNext()) {
    //                while (reader.hasNext()) {
    //                    counter++;
    //                    JsonToken nextToken = reader.peek();
    //                    System.err.print("\t");
    //                    System.err.print(counter);
    //                    System.err.print(" ");
    //                    System.err.print(state);
    //                    System.err.print("\t");
    //                    System.err.println(nextToken);
    //                    if (JsonToken.BEGIN_OBJECT.equals(nextToken)) {
    //                        reader.beginObject();
    //                        if (state == State.GLOBAL) {
    //                            state = State.LINE;
    //                        } else if (state == State.LINE) {
    //                            current = new MetroLinkedList();
    //                            System.err.println("create new line");
    //                            System.err.println("add line " + name);
    //                            result.put(name, current);
    //                            System.err.println("res:" + result);
    //                            System.err.println("cur:" + current);
    //                            state = State.STATION;
    //                        } else if (state == State.STATION) {
    //                            state = State.STATION_DETAILS;
    //                        }
    //                    } else if (JsonToken.NAME.equals(nextToken)) {
    //                        name = reader.nextName();
    //                        if (state == State.STATION) {
    //                            stationNumber = Integer.parseInt(name);
    //                            System.err.println("stationNumber=" + stationNumber);
    //                        }
    //                        System.err.println("name='" + name + "'");
    //                    } else if (JsonToken.STRING.equals(nextToken)) {
    //                        stationName = reader.nextString();
    //                        state = State.TRANSFER;
    //                    } else if (JsonToken.BEGIN_ARRAY.equals(nextToken)) {
    //                        reader.beginArray();
    //                        transfer = new ArrayList<>();
    ////                        state = State.TRANSFER;
    //                    }
    //                }
    //                System.err.println("end of object");
    //                if (state == State.TRANSFER) {
    //                    current.add(new Station(stationNumber, stationName, transfer));
    //                    System.err.println("add station " + stationName);
    //                    System.err.println("res:" + result);
    //                    System.err.println("cur:" + current);
    //                    reader.endArray();
    //                    state = State.STATION;
    //                } else {
    //                    state = State.LINE;
    //                }
    //                reader.endObject();
    //            }
    //        } catch (IOException e) {
    //            e.printStackTrace();
    //        }
    //        return result;
    //    }
    }
  learner_created: false
- name: src/MetroLinkedList.java
  visible: true
  text: |-
    import Metro.Station;

    import java.util.Collection;
    /*
    class MetroLinkedList {
        Node head;
        Node tail;
        int size;

        static class Node {
            Station value;
            Node prev;
            Node next;

            public Node(Station value, Node prev, Node next) {
                this.value = value;
                this.prev = prev;
                this.next = next;
            }
        }

        public MetroLinkedList() {
        }

        public MetroLinkedList(Collection<Station> collection) {
            for (Station el : collection) {
                add(el);
            }
        }

        public MetroLinkedList(Station[] array) {
            for (Station el : array) {
                add(el);
            }
        }

        public void printLine(Station first, Station last) {
            System.out.println(first.name);
            Node cur = head;
            while (cur != null) {
                System.out.println(cur.value.name);
                cur = cur.next;
            }
            System.out.println(last.name);
        }

        public void printTriples(Station first, Station last) {
            Station prev = first;
            Node cur = head;
            while (cur != null) {
                Station next = cur.next == null ? last : cur.next.value;
                System.out.print(prev.name);
                System.out.print(" - ");
                System.out.print(cur.value.name);
                System.out.print(" - ");
                System.out.println(next.name);
                prev = cur.value;
                cur = cur.next;
            }
        }

        public void addFirst(Station value) {
            if (head == null) {
                add(value);
            } else {
                head.prev = new Node(value, null, head);
                head = head.prev;
                size++;
            }
        }

        public void addLast(Station value) {
            add(value);
        }

        public void remove(Station value) {
            Node cur = head;
            while (cur != null && !cur.value.equals(value)) {
                cur = cur.next;
            }
            if (cur != null) {
                if (cur == head) {
                    removeFirst();
                } else if (cur == tail) {
                    removeLast();
                } else {
                    cur.prev.next = cur.next;
                    cur.prev = null;
                    cur.next = null;
                }
            }
        }

        public void removeFirst() {
            if (head != null) {
                head = head.next;
                if (head != null) {
                    head.prev = null;
                } else {
                    tail = null;
                }
            }
            size--;
        }

        public void removeLast() {
            if (tail != null) {
                tail = tail.prev;
                if (tail != null) {
                    tail.next = null;
                } else {
                    head = null;
                }
            }
            size--;
        }

        public void reverse() {
            Node cur = head;
            while (cur != null) {
                Node next = cur.next;
                cur.next = cur.prev;
                cur.prev = next;
                cur = next;
            }
            cur = tail;
            tail = head;
            head = cur;
        }

        public void split(int index) {
            Node cur = head;
            for (int i = 0; i < index; i++) {
                cur = cur.next;
            }
            tail.next = head;
            head.prev = tail;
            head = cur;
            tail = cur.prev;
            head.prev = null;
            tail.next = null;
        }

        public void add(Station el) {
            if (tail == null) {
                head = tail = new Node(el, null, null);
            } else {
                tail.next = new Node(el, tail, null);
                tail = tail.next;
            }
            size++;
        }

        @Override
        public String toString() {
            Node cur = head;
            StringBuilder buf = new StringBuilder();
            while (cur != null) {
                buf.append(cur.value).append(" ");
                cur = cur.next;
            }
            return buf.toString();
        }
    }
    */
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;

    public class Tests extends StageTest<String> {
        // test from the previous stage with one line
        @DynamicTest(order = 1)
        CheckResult oneLineTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/baltimore.json");
            String output = main.execute("/output \"SubwayLink\"").trim();

            String[] stations = new String[]{"Owings Mills", "Old Court", "Milford Mill", "Reiserstown Plaza",
                "Rogers Avenue", "West Cold Spring", "Mondawmin", "Penn North", "Uptown", "State Center",
                "Lexington Market", "Charles Center", "Shot Tower/Market Place", "Johns Hopkins Hospital"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            return CheckResult.correct();
        }

        // test of example
        @DynamicTest(order = 2)
        CheckResult multipleLineOutputTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");
            String output = main.execute("/output \"m1\"").trim();

            String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            output = main.execute("/output \"m2\"");

            stations = new String[]{"Croisettes", "Vennes", "Fourmi", "Sallaz", "CHUV", "Ours",
                "Riponne M.Bejart", "Bessieres", "Lausanne—Flon", "Lausanne Gare CFF", "Grancy", "Delices", "Jourdils",
                "Ouchy—Olympique"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            return CheckResult.correct();
        }

        // example test pt.2 (with addition)
        @DynamicTest(order = 3)
        CheckResult additionTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");

            // added a station to the end of the line
            main.execute("/append \"m1\" \"Test station 1\"");
            String output = main.execute("/output \"m1\"");

            String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            // added another one
            main.execute("/append \"m1\" \"Test station 2\"");
            output = main.execute("/output \"m1\"");

            stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            // added one station to the beginning of the line
            main.execute("/add-head \"m1\" \"Head\"");
            output = main.execute("/output \"m1\"");

            stations = new String[]{"Head", "Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            return CheckResult.correct();
        }

        // not existing file check
        @DynamicTest(order = 4)
        CheckResult nonexistingFileTest() {
            TestedProgram main = new TestedProgram();
            String output = main.start("tHiS_fIlE_DoEs_nOt_ExIsT.txt");
            if (output.trim().length() == 0) {
                return CheckResult.wrong("The program did not print anything when the file was not exist. ");
            }
            if (output.toLowerCase().startsWith("depot") || output.toLowerCase().endsWith("depot")) {
                return CheckResult.wrong("It looks like the program did not print an error message when the file was not exist.");
            }
            return CheckResult.correct();
        }

        // test of a case from the example
        @DynamicTest(order = 5)
        CheckResult outputLineWithTransfer() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{
                {"Nemocnice Motol", null},
                {"Petriny", null},
                {"Nadrazi Veleslavin", null},
                {"Borislavka", null},
                {"Dejvicka", null},
                {"Hradcanska", null},
                {"Malostranska", null},
                {"Staromestska", null},
                {"Mustek", "Linka B"},
                {"Muzeum", "Linka C"},
                {"Namesti Miru", null},
                {"Jiriho z Podebrad", null},
                {"Flora", null},
                {"Zelivskeho", null},
                {"Strasnicka", null},
                {"Skalka", null},
                {"Depo Hostivar", null}
            };

            String output = main.execute("/output \"Linka A\"");
            checkDepots(output);

            checkOutputLength(output, stations.length + 2);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult connectLinesTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{
                {"Nemocnice Motol", null},
                {"Petriny", "Linka C"},
                {"Nadrazi Veleslavin", null},
                {"Borislavka", null},
                {"Dejvicka", null},
                {"Hradcanska", null},
                {"Malostranska", null},
                {"Staromestska", null},
                {"Mustek", "Linka B"},
                {"Muzeum", "Linka C"},
                {"Namesti Miru", null},
                {"Jiriho z Podebrad", null},
                {"Flora", null},
                {"Zelivskeho", null},
                {"Strasnicka", null},
                {"Skalka", null},
                {"Depo Hostivar", null}
            };

            main.execute("/connect \"Linka C\" \"I.P.Pavlova\" \"Linka A\" \"Petriny\"");
            String output = main.execute("/output \"Linka A\"");

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        @DynamicTest(order = 7)
        CheckResult simpleRouteTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[] correctRoute = {"Petriny", "Nadrazi Veleslavin", "Borislavka", "Dejvicka", "Hradcanska", "Malostranska",
                "Staromestska", "Mustek", "Muzeum", "Namesti Miru", "Jiriho z Podebrad", "Flora"};

            String[] sOutput = main.execute("/route \"Linka A\" \"Petriny\" \"Linka A\" \"Flora\"").toLowerCase().split("\n");

            if (sOutput.length != correctRoute.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                    "Expected: " + correctRoute.length + " stations." +
                    "\nYour output: " + sOutput.length + " stations.");
            }

            for (int i = 0; i < correctRoute.length; i++) {
                if (i == 0 && !correctRoute[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                    return CheckResult.wrong("The first station in the output should be '" + correctRoute[i] + "'.");
                } else if (i != 0) {
                    if (!correctRoute[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                        return CheckResult.wrong("After '" + correctRoute[i - 1] + "' should be '" + correctRoute[i] + "'.");
                    }
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 8)
        CheckResult advancedRouteTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[] stations = {"Vysehrad", "I.P.Pavlova", "Muzeum",
                "Transition to line Linka A", "Muzeum", "Mustek",
                "Transition to line Linka B", "Mustek", "Namesti Republiky"};
            String[] sOutput = main.execute("/route \"Linka C\" \"Vysehrad\" \"Linka B\" \"Namesti Republiky\"").split("\n");

            if (sOutput.length != stations.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                    "Expected: " + (stations.length - 4) + " stations and 2 transitions. Output should be " + stations.length + " lines." +
                    "\nYour output: " + sOutput.length + " lines");
            }

            for (int i = 0; i < stations.length; i++) {
                if (i == 0 && !stations[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                    return CheckResult.wrong("The first station in the output should be " + stations[i]);
                } else if (i != 0) {
                    if (!stations[i].toLowerCase().equals(sOutput[i].toLowerCase())) {
                        return CheckResult.wrong("After '" + stations[i - 1] + "' should be '" + stations[i] + "'.");
                    }
                }
            }
            return CheckResult.correct();
        }

        // checks for "depot" at the start and at the end
        void checkDepots(String output) {
            output = output.trim().toLowerCase();
            if (!output.startsWith("depot")) {
                throw new WrongAnswer("Your output should start with 'depot'.");
            } else if (!output.endsWith("depot")) {
                throw new WrongAnswer("Your output should end with 'depot'.");
            }
        }

        // checks number of stations in output
        void checkOutputLength(String output, int correctLength) {
            int length = output.trim().split("\n").length;
            if (length != correctLength) {
                throw new WrongAnswer("You output contains wrong number of lines.\n" +
                    "Expected: " + correctLength + " lines\n" +
                    "Your output: " + length + " lines");
            }
        }

        // checks stations
        void assertStations(String output, String[] stations) {

            String[] sOutput = output.trim().split("\n");

            for (int i = 0; i < stations.length; i++) {
                if (!sOutput[i + 1].equals(stations[i])) {
                    throw new WrongAnswer("Can't find station '" + stations[i] + "' in the line number " + (i + 2));
                }
            }
        }

        void assertWithTransfer(String output, String[][] stations) {

            String[] sOutput = output.split("\n");

            for (int i = 0; i < stations.length; i++) {
                String currentLine = sOutput[i + 1].toLowerCase().trim();
                String currentStation = stations[i][0];
                String currentTransfer = stations[i][1];
                if (currentTransfer == null) {
                    if (!currentLine.equals(currentStation.toLowerCase())) {
                        throw new WrongAnswer("There is an error in your program's reply. Some stations were not found.");
                    }
                } else if (!currentLine.contains(currentStation.toLowerCase()) ||
                    !currentLine.contains(currentTransfer.toLowerCase())) {
                    throw new WrongAnswer("Expected transfer to '" + currentTransfer + "' from '" + currentStation + "' station.");
                }
            }
        }
    }
  learner_created: false
- name: test/lausanne.json
  visible: false
  text: |-
    {
      "m1": {
        "1": {
          "name": "Renes—Gare",
          "transfer": []
        },
        "2": {
          "name": "Epenex",
          "transfer": []
        },
        "3": {
          "name": "Crochy",
          "transfer": []
        },
        "4": {
          "name": "Cerisaie",
          "transfer": []
        },
        "5": {
          "name": "Bassenges",
          "transfer": []
        },
        "6": {
          "name": "EPFL",
          "transfer": []
        },
        "7": {
          "name": "UNL—Sorge",
          "transfer": []
        },
        "8": {
          "name": "Mouline",
          "transfer": []
        },
        "9": {
          "name": "UNL—Chemberonne",
          "transfer": []
        },
        "10": {
          "name": "Bourdonnette",
          "transfer": []
        },
        "11": {
          "name": "Melley",
          "transfer": []
        },
        "12": {
          "name": "Provence",
          "transfer": []
        },
        "13": {
          "name": "Montelly",
          "transfer": []
        },
        "14": {
          "name": "Vigie",
          "transfer": []
        },
        "15": {
          "name": "Lausanne—Flon",
          "transfer": []
        }
      },
      "m2": {
        "1": {
          "name": "Croisettes",
          "transfer": []
        },
        "2": {
          "name": "Vennes",
          "transfer": []
        },
        "3": {
          "name": "Fourmi",
          "transfer": []
        },
        "4": {
          "name": "Sallaz",
          "transfer": []
        },
        "5": {
          "name": "CHUV",
          "transfer": []
        },
        "6": {
          "name": "Ours",
          "transfer": []
        },
        "7": {
          "name": "Riponne M.Bejart",
          "transfer": []
        },
        "8": {
          "name": "Bessieres",
          "transfer": []
        },
        "9": {
          "name": "Lausanne—Flon",
          "transfer": []
        },
        "10": {
          "name": "Lausanne Gare CFF",
          "transfer": []
        },
        "11": {
          "name": "Grancy",
          "transfer": []
        },
        "12": {
          "name": "Delices",
          "transfer": []
        },
        "13": {
          "name": "Jourdils",
          "transfer": []
        },
        "14": {
          "name": "Ouchy—Olympique",
          "transfer": []
        }
      }
    }
  learner_created: false
- name: test/baltimore.json
  visible: false
  text: |-
    {
      "SubwayLink": {
        "1": {
          "name": "Owings Mills",
          "transfer": [],
          "time": 2
        },
        "2": {
          "name": "Old Court",
          "transfer": [],
          "time": 4
        },
        "3": {
          "name": "Milford Mill",
          "transfer": [],
          "time": 6
        },
        "4": {
          "name": "Reiserstown Plaza",
          "transfer": [],
          "time": 3
        },
        "5": {
          "name": "Rogers Avenue",
          "transfer": [],
          "time": 2
        },
        "6": {
          "name": "West Cold Spring",
          "transfer": [],
          "time": 6
        },
        "7": {
          "name": "Mondawmin",
          "transfer": [],
          "time": 4
        },
        "8": {
          "name": "Penn North",
          "transfer": [],
          "time": 5
        },
        "9": {
          "name": "Uptown",
          "transfer": [],
          "time": 7
        },
        "10": {
          "name": "State Center",
          "transfer": [],
          "time": 3
        },
        "11": {
          "name": "Lexington Market",
          "transfer": [],
          "time": 5
        },
        "12": {
          "name": "Charles Center",
          "transfer": [],
          "time": 6
        },
        "13": {
          "name": "Shot Tower/Market Place",
          "transfer": [],
          "time": 4
        },
        "14": {
          "name": "Johns Hopkins Hospital",
          "transfer": [], "time": null
        }
      }
    }
  learner_created: false
- name: src/Station.java
  visible: true
  text: |-
    import java.util.List;

    /*
    public class Station {
        int number;
        String name;
        List<Station> transfer;
        static Station depot = new Station(0, "depot", null);

        static Station depot() {
            return depot;
        }

        public Station(int number, String name, List<Station> transfer) {
            this.number = number;
            this.name = name;
            this.transfer = transfer;
        }

        public Station(String name, List<Station> transfer) {
            this.number = -1;
            this.name = name;
            this.transfer = transfer;
        }

        @Override
        public String toString() {
            return "Station{" +
                    "number=" + number +
                    ", name='" + name + '\'' +
                    ", transfer=" + transfer +
                    '}';
        }
    }
    */
  learner_created: false
- name: test/prague.json
  visible: false
  text: |-
    {
      "Linka A": {
        "1": {
          "name": "Nemocnice Motol" ,
          "transfer": []
        } ,
        "2": {
          "name": "Petriny" ,
          "transfer": []
        } ,
        "3": {
          "name": "Nadrazi Veleslavin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Borislavka" ,
          "transfer": []
        } ,
        "5": {
          "name": "Dejvicka" ,
          "transfer": []
        } ,
        "6": {
          "name": "Hradcanska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Malostranska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Staromestska" ,
          "transfer": []
        } ,
        "9": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Mustek"
            }
          ]
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Miru" ,
          "transfer": []
        } ,
        "12": {
          "name": "Jiriho z Podebrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Flora" ,
          "transfer": []
        } ,
        "14": {
          "name": "Zelivskeho" ,
          "transfer": []
        } ,
        "15": {
          "name": "Strasnicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Skalka" ,
          "transfer": []
        } ,
        "17": {
          "name": "Depo Hostivar" ,
          "transfer": []
        }
      } ,
      "Linka B": {
        "1": {
          "name": "Cerny Most" ,
          "transfer": []
        } ,
        "2": {
          "name": "Rajska zahrada" ,
          "transfer": []
        } ,
        "3": {
          "name": "Hloubetin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Kolbenova" ,
          "transfer": []
        } ,
        "5": {
          "name": "Vysocanska" ,
          "transfer": []
        } ,
        "6": {
          "name": "Ceskomoravska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Palmovka" ,
          "transfer": []
        } ,
        "8": {
          "name": "Invalidovna" ,
          "transfer": []
        } ,
        "9": {
          "name": "Krizikova" ,
          "transfer": []
        } ,
        "10": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Florenc"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Republiky" ,
          "transfer": []
        } ,
        "12": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka A" ,
              "station": "Mustek"
            }
          ]
        } ,
        "13": {
          "name": "Narodni trida" ,
          "transfer": []
        } ,
        "14": {
          "name": "Karlovo namesti" ,
          "transfer": []
        } ,
        "15": {
          "name": "Andel" ,
          "transfer": []
        } ,
        "16": {
          "name": "Smichovske nadrazi" ,
          "transfer": []
        } ,
        "17": {
          "name": "Radlicka" ,
          "transfer": []
        } ,
        "18": {
          "name": "Jinonice" ,
          "transfer": []
        } ,
        "19": {
          "name": "Nove Butovice" ,
          "transfer": []
        } ,
        "20": {
          "name": "Hurka" ,
          "transfer": []
        } ,
        "21": {
          "name": "Luziny" ,
          "transfer": []
        } ,
        "22": {
          "name": "Luka" ,
          "transfer": []
        } ,
        "23": {
          "name": "Stodulky" ,
          "transfer": []
        } ,
        "24": {
          "name": "Zlicin" ,
          "transfer": []
        }
      } ,
      "Linka C": {
        "1": {
          "name": "Letnany" ,
          "transfer": []
        } ,
        "2": {
          "name": "Prosek" ,
          "transfer": []
        } ,
        "3": {
          "name": "Strizkov" ,
          "transfer": []
        } ,
        "4": {
          "name": "Ladvi" ,
          "transfer": []
        } ,
        "5": {
          "name": "Kobylisy" ,
          "transfer": []
        } ,
        "6": {
          "name": "Nadrazi Holesovice" ,
          "transfer": []
        } ,
        "7": {
          "name": "Vltavska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Florenc"
            }
          ]
        } ,
        "9": {
          "name": "Hlavni nadrazi" ,
          "transfer": []
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka A" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "I.P.Pavlova" ,
          "transfer": []
        } ,
        "12": {
          "name": "Vysehrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Prazskeho povstani" ,
          "transfer": []
        } ,
        "14": {
          "name": "Pankrac" ,
          "transfer": []
        } ,
        "15": {
          "name": "Budejovicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Kacerov" ,
          "transfer": []
        } ,
        "17": {
          "name": "Roztyly" ,
          "transfer": []
        } ,
        "18": {
          "name": "Chodov" ,
          "transfer": []
        } ,
        "19": {
          "name": "Opatov" ,
          "transfer": []
        } ,
        "20": {
          "name": "Haje" ,
          "transfer": []
        }
      }
    }
  learner_created: false
- name: src/Graph/Graph.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/120/stages/651/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #7\n\nYour program printed an incorrect number of\
    \ stations in the route.\nExpected: 12 stations.\nYour output: 1 stations.\n\n\
    Please find below the output of your program during this failed test.\nNote that\
    \ the &#39;&gt;&#39; character indicates the beginning of the input line.\n\n\
    ---\n\nArguments: ./test/prague.json\n\nstdout:\n&gt; /route &quot;Linka A&quot;\
    \ &quot;Petriny&quot; &quot;Linka A&quot; &quot;Flora&quot;\n\nstderr:\n[./test/prague.json]\n\
    D:\\Projects\\HyperMetro\\HyperMetro\\task\ngetLine(Linka B)\ngetLine(Linka C)\n\
    getLine(Linka C)\ngetLine(Linka A)\ngetLine(Linka B)\ngetLine(Linka A)\n61 vertices,\
    \ 6 edges \n0: \n1: \n2: \n3: \n4: \n5: \n6: \n7: \n8: 28 28 \n9: 50 50 \n10:\
    \ \n11: \n12: \n13: \n14: \n15: \n16: \n17: \n18: \n19: \n20: \n21: \n22: \n23:\
    \ \n24: \n25: \n26: 48 48 \n27: \n28: 8 8 \n29: \n30: \n31: \n32: \n33: \n34:\
    \ \n35: \n36: \n37: \n38: \n39: \n40: \n41: \n42: \n43: \n44: \n45: \n46: \n47:\
    \ \n48: 26 26 \n49: \n50: 9 9 \n51: \n52: \n53: \n54: \n55: \n56: \n57: \n58:\
    \ \n59: \n60:"
  time: Fri, 27 Aug 2021 12:18:40 UTC
record: -1

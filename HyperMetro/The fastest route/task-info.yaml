type: edu
files:
- name: src/Main.java
  visible: true
  text: |
    import Metro.*;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Paths;
    import java.util.*;
    import java.util.stream.Collectors;

    public class Main {
        public static void main(String[] args) {
            String filename;
            if (args.length == 0) {
                System.out.println("No file specified");
                filename = "./HyperMetro/task/test/baltimore.json";
    //            return;
            } else {
                filename = args[0];
            }
            System.err.println(Arrays.toString(args));
            System.err.println(Paths.get("").toAbsolutePath());
            try {
                String json = Files.readString(Paths.get(filename));
                System.err.println(json);
                Metro metro = Metro.deserialize(json);
    //            Map<String, MetroLinkedList> lists = readJson(json);
    //            System.err.println(lists);
                guiLoop(metro);
            } catch (NoSuchFileException e) {
                System.out.println("Error. File " + filename + " doesn't exists");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private static List<String> parse(String command) {
            List<String> list = new ArrayList<>();
            String[] commands = command.split("\\s+", 2);
            list.add(commands[0]);
            if (commands.length > 1) {
                String params = commands[1];
                while (!params.isEmpty()) {
                    if (params.charAt(0) == '"') {
                        int closeQuotePos = params.indexOf('\"', 1);
                        list.add(params.substring(1, closeQuotePos));
                        params = params.substring(closeQuotePos + 1).trim();
                    } else {
                        int nextSpacePos = params.indexOf(' ');
                        if (nextSpacePos != -1) {
                            list.add(params.substring(0, nextSpacePos));
                            params = params.substring(nextSpacePos + 1).trim();
                        } else {
                            list.add(params);
                            params = "";
                        }
                    }
                }
            }
            return list;
        }

        private static void guiLoop(Metro metro) {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                List<String> command = parse(scanner.nextLine());
                switch (command.get(0)) {
                    case "/append": {
                        String line = command.get(1);
                        Station station = new Station(command.get(2), null);
                        System.err.println(line);
                        System.err.println(station);
                        metro.getLine(line).add(station);
                        break;
                    }
                    case "/add-head": {
                        String line = command.get(1);
                        Station station = new Station(command.get(2), null);
                        metro.getLine(line).addFirst(station);
                        break;
                    }
                    ///connect "Linka C" "I.P.Pavlova" "Linka A" "Petriny"
                    case "/connect": {
                        String line1 = command.get(1);
                        String station1 = command.get(2);
                        String line2 = command.get(3);
                        String station2 = command.get(4);
                        metro.connect(line1, station1, line2, station2);
                        break;
                    }
    //                case "/remove": {
    //                    String line = command.get(1);
    //                    Station station = new Station(command.get(2), null);
    //                    metro.getLine(line).remove(station);
    //                    break;
    //                }
                    case "/output": {
                        String line = command.get(1);
                        Collection<Station> stations = metro.getLine(line).getStations();
                        System.out.println("depot");
                        System.out.println(
                                stations.stream()
                                        .map(it -> {
                                            return it.getName()
                                                    + (it.getTransfer().isEmpty() ? "" :
                                                    " - " + it.getTransfer().get(0).getStation()
                                                    + " ("
                                                            + it.getTransfer().get(0).getLine()
                                                    + ')');
                                        })
                                        .collect(Collectors.joining("\n"))
                        );
                        System.out.println("depot");
                        break;
                    }
                    case "/exit":
                        return;
                    default:
                }
            }
        }

    //    private static Map<String, MetroLinkedList> readJson(String json) {
    //        Map<String, MetroLinkedList> result = new HashMap<>();
    //        try (JsonReader reader = new JsonReader(new StringReader(json))) {
    //            String name = "";
    //            int stationNumber = 0;
    //            String stationName = "";
    //            List<Station> transfer = null;
    //            MetroLinkedList current = null;
    //            State state = State.GLOBAL;
    //            int counter = 0;
    //            while (reader.hasNext()) {
    //                while (reader.hasNext()) {
    //                    counter++;
    //                    JsonToken nextToken = reader.peek();
    //                    System.err.print("\t");
    //                    System.err.print(counter);
    //                    System.err.print(" ");
    //                    System.err.print(state);
    //                    System.err.print("\t");
    //                    System.err.println(nextToken);
    //                    if (JsonToken.BEGIN_OBJECT.equals(nextToken)) {
    //                        reader.beginObject();
    //                        if (state == State.GLOBAL) {
    //                            state = State.LINE;
    //                        } else if (state == State.LINE) {
    //                            current = new MetroLinkedList();
    //                            System.err.println("create new line");
    //                            System.err.println("add line " + name);
    //                            result.put(name, current);
    //                            System.err.println("res:" + result);
    //                            System.err.println("cur:" + current);
    //                            state = State.STATION;
    //                        } else if (state == State.STATION) {
    //                            state = State.STATION_DETAILS;
    //                        }
    //                    } else if (JsonToken.NAME.equals(nextToken)) {
    //                        name = reader.nextName();
    //                        if (state == State.STATION) {
    //                            stationNumber = Integer.parseInt(name);
    //                            System.err.println("stationNumber=" + stationNumber);
    //                        }
    //                        System.err.println("name='" + name + "'");
    //                    } else if (JsonToken.STRING.equals(nextToken)) {
    //                        stationName = reader.nextString();
    //                        state = State.TRANSFER;
    //                    } else if (JsonToken.BEGIN_ARRAY.equals(nextToken)) {
    //                        reader.beginArray();
    //                        transfer = new ArrayList<>();
    ////                        state = State.TRANSFER;
    //                    }
    //                }
    //                System.err.println("end of object");
    //                if (state == State.TRANSFER) {
    //                    current.add(new Station(stationNumber, stationName, transfer));
    //                    System.err.println("add station " + stationName);
    //                    System.err.println("res:" + result);
    //                    System.err.println("cur:" + current);
    //                    reader.endArray();
    //                    state = State.STATION;
    //                } else {
    //                    state = State.LINE;
    //                }
    //                reader.endObject();
    //            }
    //        } catch (IOException e) {
    //            e.printStackTrace();
    //        }
    //        return result;
    //    }
    }
  learner_created: false
- name: src/MetroLinkedList.java
  visible: true
  text: |-
    import Metro.Station;

    import java.util.Collection;
    /*
    class MetroLinkedList {
        Node head;
        Node tail;
        int size;

        static class Node {
            Station value;
            Node prev;
            Node next;

            public Node(Station value, Node prev, Node next) {
                this.value = value;
                this.prev = prev;
                this.next = next;
            }
        }

        public MetroLinkedList() {
        }

        public MetroLinkedList(Collection<Station> collection) {
            for (Station el : collection) {
                add(el);
            }
        }

        public MetroLinkedList(Station[] array) {
            for (Station el : array) {
                add(el);
            }
        }

        public void printLine(Station first, Station last) {
            System.out.println(first.name);
            Node cur = head;
            while (cur != null) {
                System.out.println(cur.value.name);
                cur = cur.next;
            }
            System.out.println(last.name);
        }

        public void printTriples(Station first, Station last) {
            Station prev = first;
            Node cur = head;
            while (cur != null) {
                Station next = cur.next == null ? last : cur.next.value;
                System.out.print(prev.name);
                System.out.print(" - ");
                System.out.print(cur.value.name);
                System.out.print(" - ");
                System.out.println(next.name);
                prev = cur.value;
                cur = cur.next;
            }
        }

        public void addFirst(Station value) {
            if (head == null) {
                add(value);
            } else {
                head.prev = new Node(value, null, head);
                head = head.prev;
                size++;
            }
        }

        public void addLast(Station value) {
            add(value);
        }

        public void remove(Station value) {
            Node cur = head;
            while (cur != null && !cur.value.equals(value)) {
                cur = cur.next;
            }
            if (cur != null) {
                if (cur == head) {
                    removeFirst();
                } else if (cur == tail) {
                    removeLast();
                } else {
                    cur.prev.next = cur.next;
                    cur.prev = null;
                    cur.next = null;
                }
            }
        }

        public void removeFirst() {
            if (head != null) {
                head = head.next;
                if (head != null) {
                    head.prev = null;
                } else {
                    tail = null;
                }
            }
            size--;
        }

        public void removeLast() {
            if (tail != null) {
                tail = tail.prev;
                if (tail != null) {
                    tail.next = null;
                } else {
                    head = null;
                }
            }
            size--;
        }

        public void reverse() {
            Node cur = head;
            while (cur != null) {
                Node next = cur.next;
                cur.next = cur.prev;
                cur.prev = next;
                cur = next;
            }
            cur = tail;
            tail = head;
            head = cur;
        }

        public void split(int index) {
            Node cur = head;
            for (int i = 0; i < index; i++) {
                cur = cur.next;
            }
            tail.next = head;
            head.prev = tail;
            head = cur;
            tail = cur.prev;
            head.prev = null;
            tail.next = null;
        }

        public void add(Station el) {
            if (tail == null) {
                head = tail = new Node(el, null, null);
            } else {
                tail.next = new Node(el, tail, null);
                tail = tail.next;
            }
            size++;
        }

        @Override
        public String toString() {
            Node cur = head;
            StringBuilder buf = new StringBuilder();
            while (cur != null) {
                buf.append(cur.value).append(" ");
                cur = cur.next;
            }
            return buf.toString();
        }
    }
    */
  learner_created: false
- name: src/Station.java
  visible: true
  text: |-
    import java.util.List;

    /*
    public class Station {
        int number;
        String name;
        List<Station> transfer;
        static Station depot = new Station(0, "depot", null);

        static Station depot() {
            return depot;
        }

        public Station(int number, String name, List<Station> transfer) {
            this.number = number;
            this.name = name;
            this.transfer = transfer;
        }

        public Station(String name, List<Station> transfer) {
            this.number = -1;
            this.name = name;
            this.transfer = transfer;
        }

        @Override
        public String toString() {
            return "Station{" +
                    "number=" + number +
                    ", name='" + name + '\'' +
                    ", transfer=" + transfer +
                    '}';
        }
    }
    */
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class Tests extends StageTest<String> {
        // multiple line output
        @DynamicTest(order = 1)
        CheckResult multipleLineOutputTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");
            String output = main.execute("/output \"m1\"").trim();

            String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            stations = new String[]{"Croisettes", "Vennes", "Fourmi", "Sallaz", "CHUV", "Ours",
                "Riponne M.Bejart", "Bessieres", "Lausanne—Flon", "Lausanne Gare CFF", "Grancy", "Delices", "Jourdils",
                "Ouchy—Olympique"};

            output = main.execute("/output \"m2\"");
            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            return CheckResult.correct();
        }

        // addition test
        @DynamicTest(order = 2)
        CheckResult additionTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/lausanne.json");

            // added a station to the end of the line
            main.execute("/append \"m1\" \"Test station 1\"");
            String output = main.execute("/output \"m1\"");

            String[] stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            // added another one
            main.execute("/append \"m1\" \"Test station 2\"");
            output = main.execute("/output \"m1\"");

            stations = new String[]{"Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations);

            // added one station to the beginning of the line
            main.execute("/add-head \"m1\" \"Head\"");
            output = main.execute("/output \"m1\"");

            stations = new String[]{"Head", "Renes—Gare", "Epenex", "Crochy", "Cerisaie",
                "Bassenges", "EPFL", "UNL—Sorge", "Mouline", "UNL—Chemberonne", "Bourdonnette", "Melley",
                "Provence", "Montelly", "Vigie", "Lausanne—Flon", "Test station 1", "Test station 2"};

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertStations(output, stations
            );

            return CheckResult.correct();
        }

        // not existing file check
        @DynamicTest(order = 3)
        CheckResult nonexistingFileTest() {
            TestedProgram main = new TestedProgram();
            String output = main.start("tHiS_fIlE_DoEs_nOt_ExIsT.txt");
            if (output.trim().length() == 0) {
                return CheckResult.wrong("The program did not print anything when the file was not exist. ");
            }
            if (output.toLowerCase().startsWith("depot") || output.toLowerCase().endsWith("depot")) {
                return CheckResult.wrong("It looks like the program did not print an error message when the file was not exist.");
            }
            return CheckResult.correct();
        }

        // output with transfers
        @DynamicTest(order = 4)
        CheckResult outputLineWithTransfer() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{
                {"Nemocnice Motol", null},
                {"Petriny", null},
                {"Nadrazi Veleslavin", null},
                {"Borislavka", null},
                {"Dejvicka", null},
                {"Hradcanska", null},
                {"Malostranska", null},
                {"Staromestska", null},
                {"Mustek", "Linka B"},
                {"Muzeum", "Linka C"},
                {"Namesti Miru", null},
                {"Jiriho z Podebrad", null},
                {"Flora", null},
                {"Zelivskeho", null},
                {"Strasnicka", null},
                {"Skalka", null},
                {"Depo Hostivar", null}
            };

            String output = main.execute("/output \"Linka A\"");
            checkDepots(output);

            checkOutputLength(output, stations.length + 2);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        // connections test
        @DynamicTest(order = 5)
        CheckResult connectLinesTest() {

            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[][] stations = new String[][]{{"Nemocnice Motol", null}, {"Petriny", "Linka C"},
                {"Nadrazi Veleslavin", null}, {"Borislavka", null}, {"Dejvicka", null}, {"Hradcanska", null},
                {"Malostranska", null}, {"Staromestska", null}, {"Mustek", "Linka B"}, {"Muzeum", "Linka C"},
                {"Namesti Miru", null}, {"Jiriho z Podebrad", null}, {"Flora", null}, {"Zelivskeho", null},
                {"Strasnicka", null}, {"Skalka", null}, {"Depo Hostivar", null}
            };
            main.execute("/connect \"Linka C\" \"I.P.Pavlova\" \"Linka A\" \"Petriny\"");

            String output = main.execute("/output \"Linka A\"");

            checkDepots(output);
            checkOutputLength(output, stations.length + 2);
            assertWithTransfer(output, stations);

            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult simpleRouteTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[] correctRoute = {"Petriny", "Nadrazi Veleslavin", "Borislavka", "Dejvicka", "Hradcanska", "Malostranska",
                "Staromestska", "Mustek", "Muzeum", "Namesti Miru", "Jiriho z Podebrad", "Flora"};

            String[] sOutput = main.execute("/route \"Linka A\" \"Petriny\" \"Linka A\" \"Flora\"").toLowerCase().split("\n");

            if (sOutput.length != correctRoute.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.\n" +
                    "Expected: " + correctRoute.length + " stations." +
                    "\nYour output: " + sOutput.length + " stations.");
            }

            for (int i = 0; i < correctRoute.length; i++) {
                if (i == 0 && !correctRoute[i].equalsIgnoreCase(sOutput[i])) {
                    return CheckResult.wrong("The first station in the output should be '" + correctRoute[i] + "'.");
                } else if (i != 0) {
                    if (!correctRoute[i].equalsIgnoreCase(sOutput[i])) {
                        return CheckResult.wrong("After '" + correctRoute[i - 1] + "' should be '" + correctRoute[i] + "'.");
                    }
                }
            }

            return CheckResult.correct();
        }

        // advanced route test
        @DynamicTest(order = 7)
        CheckResult advancedRouteTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague.json");

            String[] route = {"Vysehrad", "I.P.Pavlova", "Muzeum",
                "Linka A", "Muzeum", "Mustek",
                "Linka B", "Mustek", "Namesti Republiky"};
            String[] sOutput = main.execute("/route \"Linka C\" \"Vysehrad\" \"Linka B\" \"Namesti Republiky\"").split("\n");

            if (sOutput.length != 9) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route.");
            }

            int index = 0;
            for (String station : sOutput) {
                if (!station.toLowerCase().trim().contains(route[index].toLowerCase())) {
                    return CheckResult.wrong("The route is incorrect. Wrong stations were displayed");
                }
                index++;
            }

            return CheckResult.correct();
        }

        // simple test with time
        @DynamicTest(order = 8)
        CheckResult simpleTime() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague_w_time.json");

            String[] route = {"Borislavka", "Dejvicka", "Hradcanska", "Malostranska", "Staromestska", "Mustek", "Muzeum",
                "Namesti Miru", "Jiriho z Podebrad", "Flora", "44"};
            String[] sOutput = main.execute("/fastest-route \"Linka A\" \"Borislavka\" \"Linka A\" \"Flora\"").split("\n");

            if (sOutput.length != route.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route. Expected 10 stations and the total time!");
            }

            int index = 0;
            for (String station : sOutput) {
                if (!station.toLowerCase().trim().contains(route[index].toLowerCase())) {
                    return CheckResult.wrong("The route is incorrect. Wrong stations were displayed");
                }
                index++;
            }

            return CheckResult.correct();
        }

        // advanced test with time
        @DynamicTest(order = 9)
        CheckResult advancedTime() {
            TestedProgram main = new TestedProgram();
            main.start("./test/prague_w_time.json");

            String[] route = {"Vysehrad", "I.P.Pavlova", "Muzeum", "Hlavni nadrazi", "Florenc",
                "Linka B", "Florenc", "Namesti Republiky", "29"
            };

            String[] sOutput = main.execute("/fastest-route \"Linka C\" \"Vysehrad\" \"Linka B\" \"Namesti Republiky\"")
                .split("\n");

            if (sOutput.length != 9) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route. Expected 8 stations and the total time!");
            }

            int index = 0;
            for (String station : sOutput) {
                if (!station.toLowerCase().trim().contains(route[index].toLowerCase())) {
                    return CheckResult.wrong("The route is incorrect. Wrong stations were displayed");
                }
                index++;
            }

            return CheckResult.correct();
        }

        // checks for "depot" at the start and at the end
        void checkDepots(String output) {
            output = output.trim().toLowerCase();
            if (!output.startsWith("depot")) {
                throw new WrongAnswer("Your output should start with 'depot'.");
            } else if (!output.endsWith("depot")) {
                throw new WrongAnswer("Your output should end with 'depot'.");
            }
        }

        // checks number of stations in output
        void checkOutputLength(String output, int correctLength) {
            int length = output.trim().split("\n").length;
            if (length != correctLength) {
                throw new WrongAnswer("You output contains wrong number of lines.\n" +
                    "Expected: " + correctLength + " lines\n" +
                    "Your output: " + length + " lines");
            }
        }

        // checks stations
        void assertStations(String output, String[] stations) {

            String[] sOutput = output.trim().split("\n");

            for (int i = 0; i < stations.length; i++) {
                if (!sOutput[i + 1].equals(stations[i])) {
                    throw new WrongAnswer("Can't find station '" + stations[i] + "' in the line number " + (i + 2));
                }
            }
        }

        void assertWithTransfer(String output, String[][] stations) {

            String[] sOutput = output.split("\n");

            for (int i = 0; i < stations.length; i++) {
                String currentLine = sOutput[i + 1].toLowerCase().trim();
                String currentStation = stations[i][0];
                String currentTransfer = stations[i][1];
                if (currentTransfer == null) {
                    if (!currentLine.equals(currentStation.toLowerCase())) {
                        throw new WrongAnswer("There is an error in your program's reply. Some stations were not found.");
                    }
                } else if (!currentLine.contains(currentStation.toLowerCase()) ||
                    !currentLine.contains(currentTransfer.toLowerCase())) {
                    throw new WrongAnswer("Expected transfer to '" + currentTransfer + "' from '" + currentStation + "' station.");
                }
            }
        }
    }
  learner_created: false
- name: test/lausanne.json
  visible: false
  text: |-
    {
      "m1": {
        "1": {
          "name": "Renes—Gare",
          "transfer": [],
          "time": 3
        },
        "2": {
          "name": "Epenex",
          "transfer": [],
          "time": 2
        },
        "3": {
          "name": "Crochy",
          "transfer": [],
          "time": 6
        },
        "4": {
          "name": "Cerisaie",
          "transfer": [],
          "time": 5
        },
        "5": {
          "name": "Bassenges",
          "transfer": [],
          "time": 4
        },
        "6": {
          "name": "EPFL",
          "transfer": [],
          "time": 6
        },
        "7": {
          "name": "UNL—Sorge",
          "transfer": [],
          "time": 8
        },
        "8": {
          "name": "Mouline",
          "transfer": [],
          "time": 5
        },
        "9": {
          "name": "UNL—Chemberonne",
          "transfer": [],
          "time": 4
        },
        "10": {
          "name": "Bourdonnette",
          "transfer": [],
          "time": 5
        },
        "11": {
          "name": "Melley",
          "transfer": [],
          "time": 7
        },
        "12": {
          "name": "Provence",
          "transfer": [],
          "time": 6
        },
        "13": {
          "name": "Montelly",
          "transfer": [],
          "time": 5
        },
        "14": {
          "name": "Vigie",
          "transfer": [],
          "time": 4
        },
        "15": {
          "name": "Lausanne—Flon",
          "transfer": [],
          "time": null
        }
      },
      "m2": {
        "1": {
          "name": "Croisettes",
          "transfer": [],
          "time": 6
        },
        "2": {
          "name": "Vennes",
          "transfer": [],
          "time": 5
        },
        "3": {
          "name": "Fourmi",
          "transfer": [],
          "time": 4
        },
        "4": {
          "name": "Sallaz",
          "transfer": [],
          "time": 6
        },
        "5": {
          "name": "CHUV",
          "transfer": [],
          "time": 5
        },
        "6": {
          "name": "Ours",
          "transfer": [],
          "time": 3
        },
        "7": {
          "name": "Riponne M.Bejart",
          "transfer": [],
          "time": 4
        },
        "8": {
          "name": "Bessieres",
          "transfer": [],
          "time": 6
        },
        "9": {
          "name": "Lausanne—Flon",
          "transfer": [],
          "time": 5
        },
        "10": {
          "name": "Lausanne Gare CFF",
          "transfer": [],
          "time": 3
        },
        "11": {
          "name": "Grancy",
          "transfer": [],
          "time": 4
        },
        "12": {
          "name": "Delices",
          "transfer": [],
          "time": 6
        },
        "13": {
          "name": "Jourdils",
          "transfer": [],
          "time": 3
        },
        "14": {
          "name": "Ouchy—Olympique",
          "transfer": [],
          "time": null
        }
      }
    }
  learner_created: false
- name: test/prague.json
  visible: false
  text: |-
    {
      "Linka A": {
        "1": {
          "name": "Nemocnice Motol" ,
          "transfer": []
        } ,
        "2": {
          "name": "Petriny" ,
          "transfer": []
        } ,
        "3": {
          "name": "Nadrazi Veleslavin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Borislavka" ,
          "transfer": []
        } ,
        "5": {
          "name": "Dejvicka" ,
          "transfer": []
        } ,
        "6": {
          "name": "Hradcanska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Malostranska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Staromestska" ,
          "transfer": []
        } ,
        "9": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Mustek"
            }
          ]
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Miru" ,
          "transfer": []
        } ,
        "12": {
          "name": "Jiriho z Podebrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Flora" ,
          "transfer": []
        } ,
        "14": {
          "name": "Zelivskeho" ,
          "transfer": []
        } ,
        "15": {
          "name": "Strasnicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Skalka" ,
          "transfer": []
        } ,
        "17": {
          "name": "Depo Hostivar" ,
          "transfer": []
        }
      } ,
      "Linka B": {
        "1": {
          "name": "Cerny Most" ,
          "transfer": []
        } ,
        "2": {
          "name": "Rajska zahrada" ,
          "transfer": []
        } ,
        "3": {
          "name": "Hloubetin" ,
          "transfer": []
        } ,
        "4": {
          "name": "Kolbenova" ,
          "transfer": []
        } ,
        "5": {
          "name": "Vysocanska" ,
          "transfer": []
        } ,
        "6": {
          "name": "Ceskomoravska" ,
          "transfer": []
        } ,
        "7": {
          "name": "Palmovka" ,
          "transfer": []
        } ,
        "8": {
          "name": "Invalidovna" ,
          "transfer": []
        } ,
        "9": {
          "name": "Krizikova" ,
          "transfer": []
        } ,
        "10": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka C" ,
              "station": "Florenc"
            }
          ]
        } ,
        "11": {
          "name": "Namesti Republiky" ,
          "transfer": []
        } ,
        "12": {
          "name": "Mustek" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Mustek"
            }
          ]
        } ,
        "13": {
          "name": "Narodni trida" ,
          "transfer": []
        } ,
        "14": {
          "name": "Karlovo namesti" ,
          "transfer": []
        } ,
        "15": {
          "name": "Andel" ,
          "transfer": []
        } ,
        "16": {
          "name": "Smichovske nadrazi" ,
          "transfer": []
        } ,
        "17": {
          "name": "Radlicka" ,
          "transfer": []
        } ,
        "18": {
          "name": "Jinonice" ,
          "transfer": []
        } ,
        "19": {
          "name": "Nove Butovice" ,
          "transfer": []
        } ,
        "20": {
          "name": "Hurka" ,
          "transfer": []
        } ,
        "21": {
          "name": "Luziny" ,
          "transfer": []
        } ,
        "22": {
          "name": "Luka" ,
          "transfer": []
        } ,
        "23": {
          "name": "Stodulky" ,
          "transfer": []
        } ,
        "24": {
          "name": "Zlicin" ,
          "transfer": []
        }
      } ,
      "Linka C": {
        "1": {
          "name": "Letnany" ,
          "transfer": []
        } ,
        "2": {
          "name": "Prosek" ,
          "transfer": []
        } ,
        "3": {
          "name": "Strizkov" ,
          "transfer": []
        } ,
        "4": {
          "name": "Ladvi" ,
          "transfer": []
        } ,
        "5": {
          "name": "Kobylisy" ,
          "transfer": []
        } ,
        "6": {
          "name": "Nadrazi Holesovice" ,
          "transfer": []
        } ,
        "7": {
          "name": "Vltavska" ,
          "transfer": []
        } ,
        "8": {
          "name": "Florenc" ,
          "transfer": [
            {
              "line": "Linka B" ,
              "station": "Florenc"
            }
          ]
        } ,
        "9": {
          "name": "Hlavni nadrazi" ,
          "transfer": []
        } ,
        "10": {
          "name": "Muzeum" ,
          "transfer": [
            {
              "line": "Linka A" ,
              "station": "Muzeum"
            }
          ]
        } ,
        "11": {
          "name": "I.P.Pavlova" ,
          "transfer": []
        } ,
        "12": {
          "name": "Vysehrad" ,
          "transfer": []
        } ,
        "13": {
          "name": "Prazskeho povstani" ,
          "transfer": []
        } ,
        "14": {
          "name": "Pankrac" ,
          "transfer": []
        } ,
        "15": {
          "name": "Budejovicka" ,
          "transfer": []
        } ,
        "16": {
          "name": "Kacerov" ,
          "transfer": []
        } ,
        "17": {
          "name": "Roztyly" ,
          "transfer": []
        } ,
        "18": {
          "name": "Chodov" ,
          "transfer": []
        } ,
        "19": {
          "name": "Opatov" ,
          "transfer": []
        } ,
        "20": {
          "name": "Haje" ,
          "transfer": []
        }
      }
    }
  learner_created: false
- name: test/baltimore.json
  visible: true
  text: |-
    {
      "SubwayLink": {
        "1": {
          "name": "Owings Mills",
          "transfer": []
        },
        "2": {
          "name": "Old Court",
          "transfer": []
        },
        "3": {
          "name": "Milford Mill",
          "transfer": []
        },
        "4": {
          "name": "Reiserstown Plaza",
          "transfer": []
        },
        "5": {
          "name": "Rogers Avenue",
          "transfer": []
        },
        "6": {
          "name": "West Cold Spring",
          "transfer": []
        },
        "7": {
          "name": "Mondawmin",
          "transfer": []
        },
        "8": {
          "name": "Penn North",
          "transfer": []
        },
        "9": {
          "name": "Uptown",
          "transfer": []
        },
        "10": {
          "name": "State Center",
          "transfer": []
        },
        "11": {
          "name": "Lexington Market",
          "transfer": []
        },
        "12": {
          "name": "Charles Center",
          "transfer": []
        },
        "13": {
          "name": "Shot Tower/Market Place",
          "transfer": []
        },
        "14": {
          "name": "Johns Hopkins Hospital",
          "transfer": []
        }
      }
    }
  learner_created: false
- name: src/Graph/BFS.java
  visible: true
  text: |
    package Graph;

    import java.util.*;

    public class BFS {
        Graph G;
        boolean[] marked;
        int[] parents;
        int[] distances;
        PriorityQueue<Distance> queue = new PriorityQueue<>();

        public BFS(Graph G) {
            this.G = G;
            marked = new boolean[G.V()];
            parents = new int[G.V()];
            distances = new int[G.V()];
            Arrays.fill(parents, -1);
            Arrays.fill(distances, Integer.MAX_VALUE);
        }

        public List<Integer> search(int start, int end) {
            System.err.println("search " + start + " " + end);
            ArrayDeque<Integer> result = new ArrayDeque<>();
            marked[start] = true;
            queue.add(new Distance(start, 0));
            distances[start] = 0;
            if (scan(end) != -1) {
                int v = end;
                while (parents[v] != -1) {
                    result.addFirst(v);
                    v = parents[v];
                }
                result.addFirst(v);
            }
    //        System.err.println("result: " + result);
            return new ArrayList<>(result);
        }

        private int scan(int end) {
    //        System.err.println("scan(" + end + ')');
    //        System.err.println("queue:" + queue);
            while (!queue.isEmpty()) {
                Distance d = queue.remove();
                if (d.to() == end) {
                    return end;
                }
                for (WightedEdge e : G.adj(d.to())) {
                    relax(e);
                }
            }
            return -1;
        }

        private void relax(WightedEdge e) {
    //        System.err.println("relax(" + e + ')');
            int v = e.from();
            int w = e.to();
    //        System.err.println("w, v, wei = " + w + ' ' + v + ' ' + distances[w] + ' ' + distances[v] + ' ' + e.weight());
            if (distances[w] > distances[v] + e.weight()) {
                distances[w] = distances[v] + e.weight();
                parents[w] = e.from();
                if (!setDistance(w)) {
                    queue.add(new Distance(w, distances[w]));
                }
            }
            System.err.println(Arrays.toString(distances));
    //        System.err.println("queue after relax: " + queue);
        }

        private boolean setDistance(int w) {
    //        System.err.println("setDistance(" + w + ") to " + distances[w]);
    //        System.err.println("queue:" + queue);
    //        int dist = distances[w];
            Distance dist = queue.stream().filter(it -> it.to() == w).findAny().orElse(null);
            if (dist == null) {
                return false;
            }
            dist.relax(distances[w]);
            return true;
        }

    //    public static void main(String[] args) {
    //        Graph g = new Graph(5);
    //        g.addEdge(0, 1, 1);
    //        g.addEdge(1, 0, 1);
    //        g.addEdge(1, 2, 1);
    //        g.addEdge(2, 1, 1);
    //        g.addEdge(2, 3, 1);
    //        g.addEdge(3, 2, 1);
    //        g.addEdge(3, 4, 1);
    //        g.addEdge(4, 3, 1);
    //        BFS bfs = new BFS(g);
    //        System.out.println(bfs.search(1, 3));
    //    }
    }
  learner_created: true
- name: src/Graph/Distance.java
  visible: true
  text: |
    package Graph;

    public class Distance implements Comparable<Distance> {
        private int to;
        private int distance;

        public Distance(int to, int distance) {
            this.to = to;
            this.distance = distance;
        }

        int to() {
            return to;
        }

        void relax(int distance) {
            this.distance = distance;
        }

        @Override
        public int compareTo(Distance other) {
            return Integer.compare(this.distance, other.distance);
        }

        @Override
        public String toString() {
            return "-> " + to + '=' + distance;
        }
    }
  learner_created: true
- name: src/Metro/Route.java
  visible: true
  text: |
    package Metro;

    import Graph.*;

    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    public class Route {
        private final Metro metro;
        private final Map<Integer, Station> mapVertexStation = new HashMap<>();
        private final Map<Station, Integer> mapStationVertex = new HashMap<>();

        public Route(Metro metro) {
            this.metro = metro;
        }

        public List<Station> route(String line1, String station1, String line2, String station2) {
            Graph g = initGraph();
            System.err.println(g);
            BFS bfs = new BFS(g);
            Station st1 = metro.getLine(line1).getStation(station1);
            Station st2 = metro.getLine(line2).getStation(station2);
            System.err.println("route: " + st1 + " -> " + st2);
            List<Integer> path = bfs.search(
                    mapStationVertex.get(st1),
                    mapStationVertex.get(st2));
            return path.stream().map(mapVertexStation::get)
                    .collect(Collectors.toList());
        }

        private Graph initGraph() {
            int curVertex = 0;
            for (MetroLine line : metro.metroLines) {
                for (Station station : line.getStations()) {
                    mapVertexStation.put(curVertex, station);
                    mapStationVertex.put(station, curVertex++);
                }
            }
            Graph g = new Graph(mapStationVertex.size());
            for (MetroLine line : metro.metroLines) {
                List<Station> stations = line.getStations();
                Station prev = null;
                for (Station station : stations) {
                    if (prev != null) {
                        int v = mapStationVertex.get(prev);
                        int w = mapStationVertex.get(station);
                        g.addEdge(v, w, 1);
                        g.addEdge(w, v, 1);
                        System.err.println("add edges: " + v + " <-> " + w);
                    }
                    prev = station;
                    List<TransferStation> transfer = station.getTransfer();
                    for (TransferStation ts : transfer) {
                        System.err.println(ts);
                        int v = mapStationVertex.get(station);
                        MetroLine transferLine = metro.getLine(ts.line);
                        Station transferStation = transferLine.getStation(ts.getStation());
                        int w = mapStationVertex.get(transferStation);
                        g.addEdge(v, w, 0);
                        System.err.println("add tr edges: " + v + " -> " + w);
                    }
                }
            }
            return g;
        }
    }
  learner_created: true
- name: src/Graph/WightedEdge.java
  visible: true
  text: |
    package Graph;

    public class WightedEdge {
        private final int from;
        private final int to;
        private final int weight;

        public WightedEdge(int from, int to, int weight) {
            this.from = from;
            this.to = to;
            this.weight = weight;
        }

        public int from() {
            return from;
        }
        public int to() {
            return to;
        }
        public int weight() {
            return weight;
        }

        @Override
        public String toString() {
            return from + " -> " + to + " (" + weight + ')';
        }
    }
  learner_created: true
- name: src/Graph/Graph.java
  visible: true
  text: |
    package Graph;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.List;

    public class Graph {
        private static final String NEWLINE = System.getProperty("line.separator");
        private final int V;
        private int E;
        private final List<Collection<WightedEdge>> adj;

        public Graph(int V) {
            this.V = V;
            this.E = 0;
            adj = new ArrayList<>(V);
            for (int i = 0; i < V; i++) {
                adj.add(new ArrayList<>());
            }
        }

        public int V() {
            return V;
        }

        public int E() {
            return E;
        }

        public Collection<WightedEdge> adj(int v) {
            return adj.get(v);
        }

        public int degree(int v) {
            return adj.get(v).size();
        }

        public void addEdge(int v, int w, int weigth) {
            E++;
            adj.get(v).add(new WightedEdge(v, w, weigth));
        }

        @Override
        public String toString() {
            StringBuilder s = new StringBuilder();
            s.append(V).append(" vertices, ")
                    .append(E).append(" edges ").append(NEWLINE);
            for (int v = 0; v < V; v++) {
                s.append(v).append(": ");
                for (WightedEdge w : adj.get(v)) {
                    s.append(w).append(" ");
                }
                s.append(NEWLINE);
            }
            return s.toString();
        }
    }
  learner_created: true
- name: test/prague_w_time.json
  visible: false
  text: |-
    {
      "Linka A": {
        "0": {
          "name": "Nemocnice Motol",
          "transfer": [],
          "time": 5
        },
        "1": {
          "name": "Petriny",
          "transfer": [],
          "time": 5
        },
        "2": {
          "name": "Nadrazi Veleslavin",
          "transfer": [],
          "time": 3
        },
        "3": {
          "name": "Borislavka",
          "transfer": [],
          "time": 3
        },
        "4": {
          "name": "Dejvicka",
          "transfer": [],
          "time": 4
        },
        "5": {
          "name": "Hradcanska",
          "transfer": [],
          "time": 4
        },
        "6": {
          "name": "Malostranska",
          "transfer": [],
          "time": 1
        },
        "7": {
          "name": "Staromestska",
          "transfer": [],
          "time": 7
        },
        "8": {
          "name": "Mustek",
          "transfer": [
            {
              "line": "Linka B",
              "station": "Mustek"
            }
          ],
          "time": 8
        },
        "9": {
          "name": "Muzeum",
          "transfer": [
            {
              "line": "Linka C",
              "station": "Muzeum"
            }
          ],
          "time": 5
        },
        "10": {
          "name": "Namesti Miru",
          "transfer": [],
          "time": 7
        },
        "11": {
          "name": "Jiriho z Podebrad",
          "transfer": [],
          "time": 5
        },
        "12": {
          "name": "Flora",
          "transfer": [],
          "time": 7
        },
        "13": {
          "name": "Zelivskeho",
          "transfer": [],
          "time": 1
        },
        "14": {
          "name": "Strasnicka",
          "transfer": [],
          "time": 7
        },
        "15": {
          "name": "Skalka",
          "transfer": [],
          "time": 2
        },
        "16": {
          "name": "Depo Hostivar",
          "transfer": [],
          "time": null
        }
      },
      "Linka B": {
        "0": {
          "name": "Cerny Most",
          "transfer": [],
          "time": 3
        },
        "1": {
          "name": "Rajska zahrada",
          "transfer": [],
          "time": 5
        },
        "2": {
          "name": "Hloubetin",
          "transfer": [],
          "time": 4
        },
        "3": {
          "name": "Kolbenova",
          "transfer": [],
          "time": 1
        },
        "4": {
          "name": "Vysocanska",
          "transfer": [],
          "time": 6
        },
        "5": {
          "name": "Ceskomoravska",
          "transfer": [],
          "time": 5
        },
        "6": {
          "name": "Palmovka",
          "transfer": [],
          "time": 7
        },
        "7": {
          "name": "Invalidovna",
          "transfer": [],
          "time": 5
        },
        "8": {
          "name": "Krizikova",
          "transfer": [],
          "time": 1
        },
        "9": {
          "name": "Florenc",
          "transfer": [
            {
              "line": "Linka C",
              "station": "Florenc"
            }
          ],
          "time": 5
        },
        "10": {
          "name": "Namesti Republiky",
          "transfer": [],
          "time": 3
        },
        "11": {
          "name": "Mustek",
          "transfer": [
            {
              "line": "Linka A",
              "station": "Mustek"
            }
          ],
          "time": 7
        },
        "12": {
          "name": "Narodni trida",
          "transfer": [],
          "time": 3
        },
        "13": {
          "name": "Karlovo namesti",
          "transfer": [],
          "time": 4
        },
        "14": {
          "name": "Andel",
          "transfer": [],
          "time": 3
        },
        "15": {
          "name": "Smichovske nadrazi",
          "transfer": [],
          "time": 3
        },
        "16": {
          "name": "Radlicka",
          "transfer": [],
          "time": 4
        },
        "17": {
          "name": "Jinonice",
          "transfer": [],
          "time": 7
        },
        "18": {
          "name": "Nove Butovice",
          "transfer": [],
          "time": 2
        },
        "19": {
          "name": "Hurka",
          "transfer": [],
          "time": 7
        },
        "20": {
          "name": "Luziny",
          "transfer": [],
          "time": 5
        },
        "21": {
          "name": "Luka",
          "transfer": [],
          "time": 6
        },
        "22": {
          "name": "Stodulky",
          "transfer": [],
          "time": 7
        },
        "23": {
          "name": "Zlicin",
          "transfer": [],
          "time": null
        }
      },
      "Linka C": {
        "0": {
          "name": "Letnany",
          "transfer": [],
          "time": 3
        },
        "1": {
          "name": "Prosek",
          "transfer": [],
          "time": 7
        },
        "2": {
          "name": "Strizkov",
          "transfer": [],
          "time": 5
        },
        "3": {
          "name": "Ladvi",
          "transfer": [],
          "time": 4
        },
        "4": {
          "name": "Kobylisy",
          "transfer": [],
          "time": 5
        },
        "5": {
          "name": "Nadrazi Holesovice",
          "transfer": [],
          "time": 7
        },
        "6": {
          "name": "Vltavska",
          "transfer": [],
          "time": 2
        },
        "7": {
          "name": "Florenc",
          "transfer": [
            {
              "line": "Linka B",
              "station": "Florenc"
            }
          ],
          "time": 7
        },
        "8": {
          "name": "Hlavni nadrazi",
          "transfer": [],
          "time": 2
        },
        "9": {
          "name": "Muzeum",
          "transfer": [
            {
              "line": "Linka A",
              "station": "Muzeum"
            }
          ],
          "time": 5
        },
        "10": {
          "name": "I.P.Pavlova",
          "transfer": [],
          "time": 5
        },
        "11": {
          "name": "Vysehrad",
          "transfer": [],
          "time": 4
        },
        "12": {
          "name": "Prazskeho povstani",
          "transfer": [],
          "time": 7
        },
        "13": {
          "name": "Pankrac",
          "transfer": [],
          "time": 5
        },
        "14": {
          "name": "Budejovicka",
          "transfer": [],
          "time": 5
        },
        "15": {
          "name": "Kacerov",
          "transfer": [],
          "time": 4
        },
        "16": {
          "name": "Roztyly",
          "transfer": [],
          "time": 7
        },
        "17": {
          "name": "Chodov",
          "transfer": [],
          "time": 6
        },
        "18": {
          "name": "Opatov",
          "transfer": [],
          "time": 5
        },
        "19": {
          "name": "Haje",
          "transfer": [],
          "time": null
        }
      }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/120/stages/652/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 28 Aug 2021 05:43:19 UTC
record: 6
